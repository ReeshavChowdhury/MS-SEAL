steps:
- task: NuGetToolInstaller@1
  displayName: 'Use NuGet'
  inputs:
    versionSpec: ${{ parameters.nuget_version }}

- task: NuGetCommand@2
  displayName: 'NuGet restore from Solution'
  inputs:
    command: 'restore'
    restoreSolution: 'SEAL.sln'
    feedsToUse: 'select'

- task: NuGetCommand@2
  displayName: 'NuGet restore Configuration Packages'
  inputs:
    restoreSolution: tools/config/packages.config
    restoreDirectory: ConfigPackages

- task: securedevelopmentteam.vss-secure-development-tools.build-task-credscan.CredScan@2
  displayName: 'Run CredScan'
  inputs:
    toolMajorVersion: 'V2'
    outputFormat: sarif
    debugMode: false

- task: PowerShell@2
  displayName: 'Download Strong Name certificate'
  inputs:
    targetType: 'inline'
    script: |
        # Get signing certificate
        $CertOutFile = Join-Path -Path $env:BUILD_SOURCESDIRECTORY -ChildPath dotnet\src\SEALNetCert.snk
        if (Test-Path env:SEALNetSigningCertificate) {
            Invoke-WebRequest -Uri "$env:SEALNetSigningCertificate" -OutFile $CertOutFile
        }

- task: UseDotNet@2
  displayName: 'Get .NET Core 3.1 SDK'
  inputs:
    packageType: 'sdk'
    version: '3.1.x'

- task: VSBuild@1
  displayName: 'Build solution SEAL'
  inputs:
    solution: 'SEAL.sln'
    platform: 'x64'
    configuration: ${{ parameters.configuration }}

- task: securedevelopmentteam.vss-secure-development-tools.build-task-roslynanalyzers.RoslynAnalyzers@2
  displayName: 'Run Roslyn Analyzers'

- task: VSTest@2
  displayName: 'VsTest - native tests'
  inputs:
    testAssemblyVer2: |
        **\${{ parameters.configuration }}\*test*.dll
        **\${{ parameters.configuration }}\*test*.exe
        !**\obj\**
    platform: 'x64'
    configuration: ${{ parameters.configuration }}
    diagnosticsEnabled: True

- task: VSTest@2
  displayName: 'VsTest - dotnet tests'
  inputs:
    testAssemblyVer2: |
        **\${{ parameters.configuration }}\**\sealnettest.dll
        !**\obj\**
    configuration: ${{ parameters.configuration }}
    diagnosticsEnabled: True

- task: PublishSymbols@2
  displayName: 'Publish symbols path'
  inputs:
    searchPattern: '**\bin\**\*.pdb'
    PublishSymbols: false
  continueOnError: true

- task: CopyFiles@2
  displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)'
    Contents: '**\${{ parameters.configuration }}\**\?(*.exe|*.dll|*.lib|*.xml)'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

- task: CopyFiles@2
  displayName: 'Copy Nuspec File to: $(Build.ArtifactStagingDirectory)'
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)\dotnet\nuget\'
    Contents: 'SEALNet.nuspec'
    TargetFolder: '$(Build.ArtifactStagingDirectory)\dotnet\nuget\'

- task: CopyFiles@2
  displayName: 'Copy Targets File to: $(Build.ArtifactStagingDirectory)'
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)\dotnet\nuget\'
    Contents: 'SEALNet.targets'
    TargetFolder: '$(Build.ArtifactStagingDirectory)\dotnet\nuget\'

- task: securedevelopmentteam.vss-secure-development-tools.build-task-binskim.BinSkim@3
  displayName: 'Run BinSkim'
  inputs:
    InputType: Basic
    AnalyzeTarget: '$(Build.ArtifactStagingDirectory)\native\bin\x64\${{ parameters.path }}\*.exe'
    AnalyzeSymPath: '**\bin\**\*.pdb'
  enabled: false

- task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
  displayName: 'Component Detection'

- task: corygehr.air-autoassess.uploadScanResults.uploadScanResults@1
  displayName: 'Upload Scan Results for Analysis'
  inputs:
    uploadUrl: 'https://airbuildscan.azurewebsites.net/api/Upload'
    areaPathParent: 'SEAL'
  enabled: false

- task: securedevelopmentteam.vss-secure-development-tools.build-task-publishsecurityanalysislogs.PublishSecurityAnalysisLogs@2
  displayName: 'Publish Security Analysis Logs'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: windows-drop
